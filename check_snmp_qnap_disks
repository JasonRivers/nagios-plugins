#!/bin/bash
#
#    Program : check_snmp_qnap_disks
#            :
#     Author : Jason Rivers <jason@jasonrivers.co.uk>
#            :
#    Purpose : Nagios plugin to return Information about Disks in a QNAP NAS
#            :
# Parameters : --help
#            : --version
#            :
#    Returns : Standard Nagios status_* codes
#            :
#    Licence : GPL
#
#      Notes : See --help for details
#============:==============================================================

#set -x

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

EXITCODE=$STATE_UNKNOWN

OID_NUMBER_OF_DISKS=".1.3.6.1.4.1.24681.1.2.10.0"

OID_MODEL_NUMBER=".1.3.6.1.4.1.24681.1.2.12"
OID_DISKS=".1.3.6.1.4.1.24681.1.2.11"
OID_DISKS_TEMP="${OID_DISKS}.1.3"
OID_DISKS_STATUS="${OID_DISKS}.1.7"
OID_DISKS_MODEL_NUMBER="${OID_DISKS}.1.5"

SNMPWALK=/usr/bin/snmpwalk
SNMPGET=/usr/bin/snmpget
SNMP_COMMUNITY="public"
SNMP_VERSION="2c"
WARNING=45
CRITICAL=50

while getopts H:v:C:w:c:hV OPT
do
  case "$OPT" in
    H) REMOTE_HOSTNAME="$OPTARG" ;;
    v) SNMP_VERSION="$OPTARG" ;;
    C) SNMP_COMMUNITY="$OPTARG" ;;
    w) WARNING=$OPTARG ;;
    c) CRITICAL=$OPTARG ;;
    h) print_help
       exit "$STATE_UNKNOWN" ;;
    V) print_version
       exit "$STATE_UNKNOWN";;
   esac
done


DISK_COUNTER=1
EXITMSG=""

#AVERAGE_TEMP=`$SNMPWALK -c $SNMP_COMMUNITY -v $SNMP_VERSION $REMOTE_HOSTNAME ${OID_DISKS_TEMP} -Oav | cut -c "10-11" | awk '{s+=$1}END{print ":",s/NR}' RS=" "`
AVERAGE_TEMP=`$SNMPWALK -c $SNMP_COMMUNITY -v $SNMP_VERSION $REMOTE_HOSTNAME ${OID_DISKS_TEMP} -Oav | cut -c "10-11" | awk '{s+=$1}END{print s/NR}' RS=" "`
if [ $AVERAGE_TEMP -ge $CRITICAL ]; then
	EXITCODE=$STATE_CRITICAL
	EXITMSG="CRITICAL: Average disk temperateure (${AVERAGE_TEMP}C)"
elif [ $AVERAGE_TEMP -ge $WARNING ]; then
	EXITCODE=$STATE_WARNING
	EXITMSG="WARNING: Average disk temperateure (${AVERAGE_TEMP}C)"
elif [ $AVERAGE_TEMP -lt $WARNING ]; then
	EXITCODE=$STATE_OK
	EXITMSG="OK: Average disk temperateure (${AVERAGE_TEMP}C)"
else
	EXITCODE=$STATE_UNKNOWN
	EXITMSG="UNKNOWN: Unable to get disk temperature"
fi

while read MODEL_NUMBER; do

DISK_TEMP=`$SNMPGET -c $SNMP_COMMUNITY -v $SNMP_VERSION $REMOTE_HOSTNAME ${OID_DISKS_TEMP}.${DISK_COUNTER} -Oav | cut -c "10-11"`
DISK_STATUS=`$SNMPGET -c $SNMP_COMMUNITY -v $SNMP_VERSION $REMOTE_HOSTNAME ${OID_DISKS_STATUS}.${DISK_COUNTER} -Oav | sed 's/STRING: "//;s/"//'`

if ! [ $EXITCODE = $STATE_CRITICAL ];then
	if [ $EXITCODE = $STATE_UNKNOWN ]; then
		if [ $DISK_TEMP -ge $WARNING ]; then
			EXITCODE=$STATE_WARNING
			EXITMSG="WARNING: Disk Temperature is $DISK_TEMP"
		fi
	fi

	if [ $DISK_TEMP -ge $CRITICAL ]; then
		EXITCODE=$STATE_CRITICAL
		EXITMSG="CRITICAL: Disk Temperature is $DISK_TEMP"
	fi
	if ! [ "$DISK_STATUS" = "GOOD" ]; then
		EXITCODE=$STATE_CRITICAL
		EXITMSG="CRITICAL: Disk has status $DISK_STATUS"
	fi
fi

PERFDATA="${PERFDATA}Disk${DISK_COUNTER}_temperature=$DISK_TEMP "

#echo "Disk $DISK_COUNTER ($MODEL_NUMBER) has Temperature of ${DISK_TEMP}C and status of ${DISK_STATUS}"

let DISK_COUNTER=${DISK_COUNTER}+1

done < <($SNMPWALK -c $SNMP_COMMUNITY -v $SNMP_VERSION $REMOTE_HOSTNAME $OID_DISKS_MODEL_NUMBER -Oav | sed 's/STRING: "//;s/"//' | grep "\-\-")


echo "${EXITMSG}|${PERFDATA}"
exit $EXITCODE


